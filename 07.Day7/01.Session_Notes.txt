Unit testing in React JS
~~~~~~~~~~~~~~~~~~~~
--> Create React App uses Jest as its test runner. 

--> Jest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. 

--> Jest  lets us enable fast iteration speed and prevent flakiness.

--> While Jest provides browser global such as window thanks to jsdom, they are only approximations of the real browser behaviour. 

--> Jest is intended to be used for unit tests of your logic and your components rather than the DOM .

--------------------------------------------------------------------------------------------------------------------------

How to name the test files?

--> Jest will look for test files with any of the following popular naming conventions:
		
	-a.  JavaScript 
			--> Files with .test.js suffix
			-->	Files with .spec.js suffix
	[OR]
	b.  TypeScript
			-->	Files with .spec.ts suffix
			
			
Folder Structure for React Application with Unit Test Files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	-->  Recommend practice to put the test files next to the code they are testing so that relative imports appear shorter.
		Eg:		
		
			[src]
				[Components]					
						[Emp]
								Emp.js
								Emp.css
								Emp.test.js
						[Dept]		
								Dept.js
								Dept.css
								Dept.test.js
-------------------------------------------------------------------------------------------------------------------------												
				
Required Packages:

		1.   enzyme
		2.   enzyme-adapter-react-15
			  enzyme-adapter-react-16
			  enzyme-adapter-react-17-updated 
	  3.   jest
	  4.   react-testing-renderer

	
	>	npm  i   enzyme
	>	npm  i    enzyme-adapter-react-17-updated 
 
	
Note:  
	>  npm  i  enzyme-adapter-react-17-updated  --force	
------------------------------------------------------------------------------------------------
	
Command Line Interface
~~~~~~~~~~~~~~~~~~~~
--> When you run npm test, Jest will launch in watch mode. 
--> Every time you save a file, it will re-run the tests, like how npm start recompiles the code.


	>		npm  test													(Run all test files 	*.test.js)
	>		npm  test  "Counter.test.js"					(Running specific test file)	
			npm  test  "Login.test.js"
	
-----------------------------------------------------------------------------------------------------------------------------	
	

	
	
Writing Tests
~~~~~~~~~~~~
-->  To create tests, add it() (or test()) blocks with the name of the test and its code. 
--> You may optionally wrap them in describe() blocks for logical grouping but this is neither required nor recommended.
--> Jest provides a built-in expect() global function for making assertions. 


--> A basic test could look like this:	
	
Syntax:		
		it(nameTest,  callback);
		test(nameTest,  callback);
	
	import sum from './sum';

	it('sums numbers', () => {
		let result = sum(1,2);
	  expect(result).toEqual(3);	
	});
----------------------------------------------------------------------------------------------------------------


Writing unit test cases using Enzyme with Jest
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Required Packages:

		1.   enzyme
		2.   enzyme-adapter-react-15
			  enzyme-adapter-react-16
			  enzyme-adapter-react-17-updated 

	
	>	npm  i --save  enzyme
	>	npm  i --save  enzyme-adapter-react-17-updated 
	>  npm  i --save  enzyme-adapter-react-17-updated  --force
----------------------------------------------------------------------------------------------

Writing Testcases
~~~~~~~~~~~~~~~~~

Shallow Rendering in Enzyme to test components:


	import {shallow} from 'enzyme';
	
	
	const wrapper = shallow(<Counter />);
	
	

To find the tags from the component:			wrapper.find("selector")

--> selector ---   css selector  Eg:		tagname, #id, .classname

			wrapper.find("h1")
			wrapper.find("#t1")
			wrapper.find(".c1")
			
			
		 let str  = wrapper.find("#t1").props().value;		// for all input fields  like input, textarea, select 
		 let str  = wrapper.find("#result").text();    	// for all pair tags like  h1, div, p, td, etc.....
		 
			
			
https://jestjs.io/docs/expect



Testing dom events
---------------------------		

	Syntax:		wrapper.find("selector").simulate("eventname");
	Eg:				wrapper.find("#b1").simulate("click");
						wrapper.find("#t1").simulate("change");
						

-------------------------------------------------------------------------------------------------------
 
