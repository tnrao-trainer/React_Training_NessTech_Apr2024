Training : React JS
Day1 :  16th Apr, 2024
Topic :  State Management  in React JS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Recap the React JS Basics
~~~~~~~~~~~~~~~~~~~~~~

-->  ES6 concepts --  Arrow Functions,  Destructuring (Array & Object),  Spread Attributes, Default parameters, string literals (formatting strings),....

-->  JavaScript Pre-defined Library :  
				a.  Array	:		 find, findIndex, filter, map, etc....
				b.  Strings :    
				c.   Math 
				d.  DateTime
				
-->  React Intro. 	 --    Component based development 
					a.  Custom Tags (User Defined Tag)
					b.  Reusable code + ui
					c.  Small, Individual units of code
					d.  Single Responsibility in SOLID Design Principle
					e.  code/logic  (javascript)  + ui	( jsx  = html +  js prog. items) 
					
						<p>{uname}</p>
						<button  onClick={buttonClick}>Get Data</button>
						<span>{price * qty}</span>
						<img  src={"/Images/" +  prodObj.imageUrl}  />
	
-->   State and Props	(communicate between components)
-->   App Component -- Root component
			a.  Access other components in app component
			
-->   Routing --   Implement Navigations / SPA 


Note: Component name should be starts with uppercase letter. 
	
	Warning: The tag <hello> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.	
------------------------------------------------------------------------------------------------------

	
Environment Setup
~~~~~~~~~~~~~~~~~
1.   Install   Node JS
		
2.   Install   create-react-app

		npm  i  -g  create-react-app

3.   Install VS Code



Project Creation:
		>   create-react-app   my-project
		>   cd my-project
		>   npm start 
		
		

Note:
--> Hooks (special functions) are a new addition in React 16.8. They let you use state and other React features without writing a class (with functions).
						
				


Return UI from Component
~~~~~~~~~~~~~~~~~~~~~~~~~
	1.   Use extra div tag 
				 return(
				  <div>
				  <p>  Hello World -1  </p>	  
				  <p>  Hello World -1  </p>
				  </div>	
				  );
				  
   2.    Using <React.Fragment> </React.Fragment>
				 return(
						<React.Fragment>
								<p>  Hello World -1  </p>	  
								<p>  Hello World -1  </p>
				  </React.Fragment>	
				  );	  
				  
	  3.    Using alias for fragment :     <> </>
				 return(
						<>
								<p>  Hello World -1  </p>	  
								<p>  Hello World -1  </p>
				  </>	
				  );	  

	
	-------------------------------------------------------------------------------------------
	
	
	JavaScript:
				<button  onclick="buttonClick()">Update Counter</button>   

	React JSX
				<button  onClick={buttonClick}>Update Counter</button>   






				
					
Processing State data 
~~~~~~~~~~~~~~~~~~~~



	<img  src="Image1.jpg"  />
  <Greeting  uname="Narasimha"  />


Note:   Props ---  Cannot assign to read only property 'uname'.






Keys in React JS
~~~~~~~~~~~~~~
-->  A “key” is a special string attribute you need to include when creating lists of elements in React. Keys are used in React to identify which items in the list are changed, updated, or deleted. Keys are used to give an identity to the elements in the lists.

    let resultsArray =  this.state.empsArray.map( (item, index) => 
    {
     return ( <tr  key={index}>
        <td>{item.empno}</td>
        <td>{item.ename}</td>
        <td>{item.deptno}</td>
      </tr>);
    } );








<Emps  deptno="10"  />
<Emps  deptno="20"  />















Dept List and Dept Deatails
~~~~~~~~~~~~~~~~~~~~~~~~~~

1.  Parent Component:
			a .  DeptList Component
			b.  holds the dept arrays
			c.   send dept object  to DeptDetails (Child) component
			
			
2.    Child Component

		a. Display the dept details 
		b. Provide link/button  to remove the dept	
			
			
			



Applying Styles in React Component
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Tag Level:
			<h3 style=  {  object  } >
			<h3 style=  {  {prop:value, prop:value,......}  } >
			<h3 style={{margin: "2px", color:"Red"}}>
			
			
Component Level:
		a.  Define the styles using *.css file ---		DetpDetails.css
		b.  Import the *.css file in component:
				import './DeptDetails.css';
		


Parent:

	  var result =  this.state.depts.map ( item =>        
                   <DeptDetails  onDeptRemoved={this.deptRemove_parent}  deptObj={item} />
                    );




-------------------------------------------------------
Child:
<div  id="div1">
	   <h3 style={{margin: "2px", color:"Red"}}> {this.props.deptObj.dname} </h3>
		<u> Deptno : {this.props.deptObj.deptno} </u>  <br/>
		 Location : <span style={{color:"Green"}}> {this.props.deptObj.loc} </span>   <br/>       
		<a href="javascript:void(0);"  onClick={this.deptRemove_child}>Remove</a> 
</div> );
------------------------------------------------------------------------------------------------


 var resultArray = this.state.empsArray.map( item =>  
      <tr>
				<td>{item.empno}</td>
				<td>{item.ename}</td>
				<td>{item.deptno}</td>
      </tr>);
	  
	  
 var resultArray = this.state.empsArray.map( (item, index) =>  
      <tr  key={index}>
				<td>{item.empno}</td>
				<td>{item.ename}</td>
				<td>{item.deptno}</td>
      </tr>);
	  
	  
	    
JavaScript Libraries:

	---   Array Methods
				Advanced  :   map,  find, findIndex, filter 		
	---   String Methods
	---   DateTime / Numeric 
	
	 this.state.empsArray.push(obj);
	  
	  
	  
	  
	  
	   
	   
	   
	   
	   
	   
	  DeptList	   
	  DeptDetails
	  
	    	  
Single-responsibility principle (SRP)
	--> The single-responsibility principle (SRP) is a computer programming principle that states that "A module should be responsible to one, and only one, actor.
	
	
	TABLE 
	TR
	TD
	TH
	THEAD
	TBODY
	TFOOD
	
	
	 var result =  this.state.depts.map ( item =>        
						<DeptDetails  
								deptObj={item} 
								onDeptRemoved={this.deptRemove_parent}     />
                    );









-------------------------------------------------------------------------------------------


1.  Class Components (stateful)
2.  Functional Components without hooks (stateless)
		
		function   WelcomeCard(props)
		{
				return <p> Welcome to  {props.uname} </p>
		}

3.  Functional Components with hooks (stateful)

		-->  Array destructuring in javascript




Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.











